{
  "name": "proxy-addr",
  "description": "Determine address of proxied request",
  "version": "1.0.0",
  "author": {
    "name": "Douglas Christopher Wilson",
    "email": "doug@somethingdoug.com"
  },
  "license": "MIT",
  "keywords": [
    "ip",
    "proxy",
    "x-forwarded-for"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/expressjs/proxy-ip.git"
  },
  "bugs": {
    "url": "https://github.com/expressjs/proxy-ip/issues"
  },
  "dependencies": {
    "ipaddr.js": "0.1.2"
  },
  "devDependencies": {
    "mocha": "~1.18.2",
    "should": "~3.3.1"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "mocha --reporter spec test/"
  },
  "readme": "# proxy-addr [![Build Status](https://travis-ci.org/expressjs/proxy-addr.svg?branch=master)](https://travis-ci.org/expressjs/proxy-addr) [![NPM version](https://badge.fury.io/js/proxy-addr.svg)](http://badge.fury.io/js/proxy-addr)\n\nDetermine address of proxied request\n\n## Install\n\n    npm install proxy-addr\n\n## API\n\n    var proxyaddr = require('proxy-addr');\n\n### proxyaddr(req, trust)\n\nReturn the address of the request, using the given `trust` parameter.\n\nThe `trust` argument is a function that returns `true` if you trust\nthe address, `false` if you don't. The closest untrusted address is\nreturned.\n\n    proxyaddr(req, function(addr){ return addr === '127.0.0.1' })\n    proxyaddr(req, function(addr, i){ return i < 1 })\n\nThe `trust` arugment may also be a single IP address string or an\narray of trusted addresses, as plain IP addresses, CIDR-formatted\nstrings, or IP/netmask strings.\n\n    proxyaddr(req, '127.0.0.1')\n    proxyaddr(req, ['127.0.0.0/8', '10.0.0.0/8'])\n    proxyaddr(req, ['127.0.0.0/255.0.0.0', '192.168.0.0/255.255.0.0'])\n\nThis module also supports IPv6. Your IPv6 addresses will be normalized\nautomatically (i.e. `fe80::00ed:1` equals `fe80:0:0:0:0:0:ed:1`).\n\n    proxyaddr(req, '::1')\n    proxyaddr(req, ['::1/128', 'fe80::/10'])\n    proxyaddr(req, ['fe80::/ffc0::'])\n\nThis module will automatically work with IPv4-mapped IPv6 addresses\nas well to support node.js in IPv6-only mode. This means that you do\nnot have to specify both `::ffff:a00:1` and `10.0.0.1`.\n\nAs a convenience, this module also takes certain pre-defined names\nin addition to IP addresses, which expand into IP addresses:\n\n    proxyaddr(req, 'loopback')\n    proxyaddr(req, ['loopback', 'fc00:ac:1ab5:fff::1/64'])\n\n  * `loopback`: IPv4 and IPv6 loopback addresses (like `::1` and\r\n    `127.0.0.1`).\n  * `linklocal`: IPv4 and IPv6 link-local addresses (like\r\n    `fe80::1:1:1:1` and `169.254.0.1`).\n  * `uniquelocal`: IPv4 private addresses and IPv6 unique-local\r\n    addresses (like `fc00:ac:1ab5:fff::1` and `192.168.0.1`).\n\nWhen `trust` is specified as a function, it will be called for each\naddress to determine if it is a trusted address. The function is\ngiven two arguments: `addr` and `i`, where `addr` is a string of\nthe address to check and `i` is a number that represents the distance\nfrom the socket address.\n\n### proxyaddr.all(req, [trust])\n\nReturn all the addresses of the request, optionally stopping at the\nfirst untrusted. This array is ordered from closest to furthest\n(i.e. `arr[0] === req.connection.remoteAddress`).\n\n    proxyaddr.all(req)\n\nThe optional `trust` argument takes the same arguments as `trust`\ndoes in `proxyaddr(req, trust)`.\n\n    proxyaddr.all(req, 'loopback')\n\n### proxyaddr.compile(val)\n\nCompiles argument `val` into a `trust` function. This function takes\nthe same arguments as `trust` does in `proxyaddr(req, trust)` and\nreturns a function suitable for `proxyaddr(req, trust)`.\n\n    var trust = proxyaddr.compile('localhost')\n    var addr  = proxyaddr(req, trust)\n\nThis function is meant to be optimized for use against every request.\nIt is recommend to compile a trust function up-front for the trusted\nconfiguration and pass that to `proxyaddr(req, trust)` for each request.\n\n## License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/expressjs/proxy-ip",
  "_id": "proxy-addr@1.0.0",
  "dist": {
    "shasum": "162b9ab1c30354cbc540e562e42480cfbb866554"
  },
  "_from": "proxy-addr@1.0.0",
  "_resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-1.0.0.tgz"
}
